#!/usr/bin/env bash

###
# @license
# Heye VÃ¶cking All Rights Reserved.
#
# Use of this source code is governed by an MIT-style license that can be
# found in the LICENSE file at https://telepathy.app/license
##

set -euo pipefail

SITES="telepathy.app snap.telepathy.app"

mount_bucket() {
  local BUCKET=$1; shift
  local MOUNT_POINT=$1; shift
  if mount | grep "$BUCKET on $MOUNT_POINT type fuse" >/dev/null
  then
    return
  fi
  mkdir -p "$MOUNT_POINT"
  gcsfuse --implicit-dirs "$BUCKET" "$MOUNT_POINT"
}

read_bucket() {
  local BUCKET=$1; shift
  local TARGET=$1; shift

  local MOUNT_POINT="/mnt/buckets/$BUCKET"
  mount_bucket "$BUCKET" "$MOUNT_POINT"
  cp -rf "$MOUNT_POINT/$(basename "$TARGET")" $(dirname "$TARGET")
}

ipfs_configure() {
  if [ ! -d "$IPFS_PATH" ]
  then
    ipfs init
  fi

  read_bucket ipfs.telepathy.app "$IPFS_PATH/keystore"
  read_bucket ipfs.telepathy.app "$IPFS_PATH/config"
}

start_wait() {
  local FN_NAME=$1; shift
  local PATTERN=$1; shift
  ($FN_NAME | tee "/var/log/$FN_NAME.log") &
  while ! grep -q "$PATTERN" "/var/log/$FN_NAME.log"
  do
    sleep 1
  done
}

ipfs_daemon() {
  /usr/local/bin/ipfs daemon \
    --enable-namesys-pubsub \
    --enable-gc \
    --enable-pubsub-experiment \
  ;
}

key_name_to_id() {
  local NAME=$1; shift
  curl -s "localhost:5001/api/v0/key/list?arg=l" \
    | jq -r '.[][] | select(.Name == "'$NAME'") | .Id' \
  ;
}

resolve_name() {
  local NAME=$1; shift
  local ID=$(key_name_to_id $NAME)
  curl -s "localhost:5001/api/v0/name/resolve?arg=$ID&dht-timeout=1s" \
    | jq -r .Path \
  ;
}

caddy_configure() {
  read_bucket caddy.telepathy.app "$CADDYPATH/acme"
  read_bucket caddy.telepathy.app "$CADDYPATH/Caddyfile"
}

caddy_daemon() {
  /usr/local/bin/caddy \
    -log stdout \
    -agree=true \
    -conf="$CADDYPATH/Caddyfile" \
  ;
}

main() {
  ipfs_configure
  start_wait ipfs_daemon "^Daemon is ready$"

  caddy_configure
  start_wait caddy_daemon "^done.$"

  while true
  do
    # Check for ipfs
    if ! ps awux | grep [/]usr/local/bin/ipfs > /dev/null
    then
      echo "ipfs not running, closing..."
      break
    fi

    # Check for caddy
    if ! ps awux | grep [/]usr/local/bin/caddy > /dev/null
    then
      echo "caddy not running, closing..."
      break
    fi

    # Keep the cache fresh therefore resolve on a constant basis
    for SITE in $SITES
    do
      resolve_name "$SITE"
    done

    sleep 2
  done
}

main
